# Define a dictionary of opcodes and their corresponding instructions
opcodes = {
    "00": "BRK",
    "01": "ORA",
    "02": "COP",
    "03": "ORA",
    "04": "TSB",
    "05": "ORA",
    "06": "ASL",
    "07": "ORA",
    "08": "PHP",
    "09": "ORA",
    "0A": "ASL",
    "0B": "PHD",
    "0C": "TSB",
    "0D": "ORA",
    "0E": "ASL",
    "0F": "ORA",
    "10": "BPL",
    "11": "ORA",
    "12": "ORA",
    "13": "ORA",
    "14": "TRB",
    "15": "ORA",
    "16": "ASL",
    "17": "ORA",
    "18": "CLC",
    "19": "ORA",
    "1A": "INC",
    "1B": "TCS",
    "1C": "TRB",
    "1D": "ORA",
    "1E": "ASL",
    "1F": "ORA",
    "20": "JSR",
    "21": "AND",
    "22": "JSL",
    "23": "AND",
    "24": "BIT",
    "25": "AND",
    "26": "ROL",
    "27": "AND",
    "28": "PLP",
    "29": "AND",
    "2A": "ROL",
    "2B": "PLD",
    "2C": "BIT",
    "2D": "AND",
    "2E": "ROL",
    "2F": "AND",
    "30": "BMI",
    "31": "AND",
    "32": "AND",
    "33": "AND",
    "34": "BIT",
    "35": "AND",
    "36": "ROL",
    "37": "AND",
    "38": "SEC",
    "39": "AND",
    "3A": "DEC",
    "3B": "TSC",
    "3C": "BIT",
    "3D": "AND",
    "3E": "ROL",
    "3F": "AND",
    "40": "RTI",
    "41": "EOR",
    "42": "WDM",
    "43": "EOR",
    "44": "MVP",
    "45": "EOR",
    "46": "LSR",
    "47": "EOR",
    "48": "PHA",
    "49": "EOR",
    "4A": "LSR",
    "4B": "PHK",
    "4C": "JMP",
    "4D": "EOR",
    "4E": "LSR",
    "4F": "EOR",
    "50": "BVC",
    "51": "EOR",
    "52": "EOR",
    "53": "EOR",
    "54": "MVN",
    "55": "EOR",
    "56": "LSR",
    "57": "EOR",
    "58": "CLI",
    "59": "EOR",
    "5A": "PHY",
    "5B": "TCD",
    "5C": "JMP",
    "5D": "EOR",
    "5E": "LSR",
    "5F": "EOR",
    "60": "RTS",
    "61": "ADC",
    "62": "PER",
    "63": "ADC",
    "64": "STZ",
    "65": "ADC",
    "66": "ROR",
    "67": "ADC",
    "68": "PLA",
    "69": "ADC",
    "6A": "ROR",
    "6B": "RTL",
    "6C": "JMP",
    "6D": "ADC",
    "6E": "ROR",
    "6F": "ADC",
    "70": "BVS",
    "71": "ADC",
    "72": "ADC",
    "73": "ADC",
    "74": "STZ",
    "75": "ADC",
    "76": "ROR",
    "77": "ADC",
    "78": "SEI",
    "79": "ADC",
    "7A": "PLY",
    "7B": "TDC",
    "7C": "JMP",
    "7D": "ADC",
    "7E": "ROR",
    "7F": "ADC",
    "80": "BRA",
    "81": "STA",
    "82": "BRL",
    "83": "STA",
    "84": "STY",
    "85": "STA",
    "86": "STX",
    "87": "STA",
    "88": "DEY",
    "89": "BIT",
    "8A": "TXA",
    "8B": "PHB",
    "8C": "STY",
    "8D": "STA",
    "8E": "STX",
    "8F": "STA",
    "90": "BCC",
    "91": "STA",
    "92": "STA",
    "93": "STA",
    "94": "STY",
    "95": "STA",
    "96": "STX",
    "97": "STA",
    "98": "TYA",
    "99": "STA",
    "9A": "TXS",
    "9B": "TXY",
    "9C": "STZ",
    "9D": "STA",
    "9E": "STZ",
    "9F": "STA",
    "A0": "LDY",
    "A1": "LDA",
    "A2": "LDX",
    "A3": "LDA",
    "A4": "LDY",
    "A5": "LDA",
    "A6": "LDX",
    "A7": "LDA",
    "A8": "TAY",
    "A9": "LDA",
    "AA": "TAX",
    "AB": "PLB",
    "AC": "LDY",
    "AD": "LDA",
    "AE": "LDX",
    "AF": "LDA",
    "B0": "BCS",
    "B1": "LDA",
    "B2": "LDA",
    "B3": "LDA",
    "B4": "LDY",
    "B5": "LDA",
    "B6": "LDX",
    "B7": "LDA",
    "B8": "CLV",
    "B9": "LDA",
    "BA": "TSX",
    "BB": "TYX",
    "BC": "LDY",
    "BD": "LDA",
    "BE": "LDX",
    "BF": "LDA",
    "C0": "CPY",
    "C1": "CMP",
    "C2": "REP",
    "C3": "CMP",
    "C4": "CPY",
    "C5": "CMP",
    "C6": "DEC",
    "C7": "CMP",
    "C8": "INY",
    "C9": "CMP",
    "CA": "DEX",
    "CB": "WAI",
    "CC": "CPY",
    "CD": "CMP",
    "CE": "DEC",
    "CF": "CMP",
    "D0": "BNE",
    "D1": "CMP",
    "D2": "CMP",
    "D3": "CMP",
    "D4": "PEI",
    "D5": "CMP",
    "D6": "DEC",
    "D7": "CMP",
    "D8": "CLD",
    "D9": "CMP",
    "DA": "PHX",
    "DB": "STP",
    "DC": "JML",
    "DD": "CMP",
    "DE": "DEC",
    "DF": "CMP",
    "E0": "CPX",
    "E1": "SBC",
    "E2": "SEP",
    "E3": "SBC",
    "E4": "CPX",
    "E5": "SBC",
    "E6": "INC",
    "E7": "SBC",
    "E8": "INX",
    "E9": "SBC",
    "EA": "NOP",
    "EB": "XBA",
    "EC": "CPX",
    "ED": "SBC",
    "EE": "INC",
    "EF": "SBC",
    "F0": "BEQ",
    "F1": "SBC",
    "F2": "SBC",
    "F3": "SBC",
    "F4": "PEA",
    "F5": "SBC",
    "F6": "INC",
    "F7": "SBC",
    "F8": "SED",
    "F9": "SBC",
    "FA": "PLX",
    "FB": "XCE",
    "FC": "JSR",
    "FD": "SBC",
    "FE": "INC",
    "FF": "SBC",
    "Unknown": "An unknown or invalid instruction."
}

# Define a dictionary of instructions and their corresponding descriptions
descriptions = {
    "BRK": "Force an interrupt.",
    "ORA": "Logically OR the accumulator with a memory location.",
    "COP": "Push processor status on stack and force an interrupt.",
    "TSB": "Test and set bits in a memory location.",
    "ASL": "Shift left.",
    "PHP": "Push the accumulator on the stack.",
    "PHD": "Push the data bank register on the stack.",
    "BCHG": "Test and clear bits in the data bank register.",
    "MOVEP": "Move data between memory and register pairs.",
    "MOVEA": "Move address from source to destination.",
    "MOVE": "Move data from source to destination.",
    "LEA": "Load effective address into destination operand.",
    "CMP": "Compare destination and source operands.",
    "JSR": "Jump to subroutine.",
    "AND": "Logically AND the accumulator with a memory location.",
    "JSL": "Jump to subroutine and save return address.",
    "BIT": "Test bits in the accumulator.",
    "ROL": "Rotate left.",
    "PLP": "Pull the accumulator from the stack.",
    "PLD": "Pull the data bank register from the stack.",
    "BPL": "Branch on positive result.",
    "TRB": "Test and reset bits in a memory location.",
    "CLC": "Clear carry flag.",
    "INC": "Increment the accumulator by one.",
    "TCS": "Transfer the accumulator to the stack pointer.",
    "JMP": "Jump to a new location.",
    "JSR": "Jump to subroutine.",
    "WDM": "Reserved instruction.",
    "MVP": "Move data between memory and register pairs.",

    "LSR": "Shift right.",
    "BVC": "Branch on overflow clear.",
    "MVN": "Move data between memory and register pairs.",
    "CLI": "Clear interrupt disable flag.",
    "PHK": "Push the program bank register on the stack.",
    "RTI": "Return from interrupt.",
    "EOR": "Exclusive OR the accumulator with a memory location.",
    "PER": "Push return address on stack.",
    "STZ": "Store zero in memory location.",
    "PHB": "Push data bank register on stack.",
    "BRA": "Branch always.",
    "STA": "Store the accumulator in memory.",
    "BRL": "Branch long.",
    "STY": "Store the index register Y in memory.",
    "STX": "Store the index register X in memory.",
    "DEY": "Decrement index register Y by one.",
    "TXA": "Transfer index register X to the accumulator.",
    "PHY": "Push index register Y on stack.",
    "TCD": "Transfer accumulator to direct page register.",
    "BNE": "Branch on result not equal to zero.",
    "PEI": "Push effective indirect address on stack.",
    "CLV": "Clear overflow flag.",
    "TSX": "Transfer stack pointer to index register X.",
    "TXY": "Transfer index register X to index register Y.",
    "TYX": "Transfer index register Y to index register X.",
    "LDY": "Load the index register Y with a memory location.",
    "LDA": "Load the accumulator with a memory location.",
    "LDX": "Load the index register X with a memory location.",
    "TAY": "Transfer accumulator to index register Y.",
    "TAX": "Transfer accumulator to index register X.",
    "PLB": "Pull data bank register from stack.",
    "BCC": "Branch on carry clear.",
    "JML": "Jump to subroutine and save return address.",
    "CPY": "Compare index register Y with a memory location.",
    "REP": "Reset processor status bits.",
    "DEC": "Decrement the accumulator by one.",
    "INY": "Increment index register Y by one.",
    "DEX": "Decrement index register X by one.",
    "WAI": "Wait for interrupt.",
    "PEA": "Push effective address on stack.",
    "SEI": "Set interrupt disable flag.",
    "PLY": "Pull index register Y from stack.",
    "TDC": "Transfer direct page register to accumulator.",
    "CPX": "Compare index register X with a memory location.",
    "SBC": "Subtract memory location from accumulator with borrow.",
    "SEP": "Set processor status bits.",
    "INC": "Increment the accumulator by one.",
    "INX": "Increment index register X by one.",
    "NOP": "No operation.",
    "XBA": "Exchange the high and low bytes of the accumulator.",
    "PLX": "Pull index register X from stack.",
    "XCE": "Exchange carry and emulation flags.",
    "STP": "Stop the processor and place it in a low-power state.",
    "Unknown": "An unknown or invalid instruction."
}


# Define a function to print the description of an instruction
def print_description(opcode):
    if opcode in descriptions:
        print(descriptions[opcode])
    else:
        print(descriptions["Unknown"])


# Read in the file name
filename = input("Enter the name of the assembly file: ")

# Open the file and read in each line
with open(filename, "r") as file:
    for line in file:
        # Split the line into the opcode and operand
        parts = line.split(" ")
        opcode = parts[0]
        # Print the description of the instruction
        print_description(opcode)







